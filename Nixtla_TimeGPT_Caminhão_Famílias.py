import numpy as np
import pandas as pd
from utilsforecast.evaluation import evaluate
from utilsforecast.plotting import plot_series
from utilsforecast.losses import mse, mae, rmse, smape, bias
from nixtla import NixtlaClient
import streamlit as st

st.set_page_config(page_title='NIXTLA TimeGPT - NO PARADIGMA FORECAST', 
                   layout='wide', page_icon='üé¢', initial_sidebar_state='auto')

st.title('TimeGPT: A Revolu√ß√£o da Previs√£o')


st.image('https://th.bing.com/th/id/OIP.3gbJuoIfIp_g7z4ER6d7oAHaEK?rs=1&pid=ImgDetMain', width=800)


st.markdown("Saiba mais sobre o TimeGPT no [site oficial](https://docs.nixtla.io/).")

st.markdown('''***Otimizando Previs√µes de Demanda de Caminh√µes com TimeGPT: Um Experimento de Fine-tuning***

Investigamos o impacto de diferentes estrat√©gias de fine-tuning na precis√£o das previs√µes geradas pelo TimeGPT, utilizando como caso de estudo a demanda por caminh√µes nas categorias semileves, leves, m√©dios, semipesados e pesados. As abordagens avaliadas incluem:

1. Modelo Base: TimeGPT pr√©-treinado.
2. Fine-tuning Padr√£o: Ajuste fino do modelo aos dados espec√≠ficos.
3. Fine-tuning com MAE: Minimiza√ß√£o do erro absoluto m√©dio para previs√µes mais robustas.
4. Fine-tuning Avan√ßado: Combina√ß√£o de MAE e ajuste da profundidade das camadas para maior refinamento.
Os resultados revelam que o fine-tuning, especialmente quando personalizado com a m√©trica MAE e ajustes na arquitetura do modelo, oferece previs√µes mais precisas e confi√°veis, demonstrando o potencial do TimeGPT como ferramenta para a an√°lise de s√©ries temporais complexas."
''')

col1, col2=st.columns([3,1.5], gap='large')

with col1:

    st.write('***Gr√°fico Previs√¢o 1. Modelo Base***')
    st.image(r'C:\Users\luizt\my_streamlit_app\forecast1.png', width=1400)

with col2:

    st.markdown('''O gr√°fico mostra as s√©ries temporais e as previs√µes geradas pelo modelo ***TimeGPT*** para diferentes categorias de ***caminh√µes: Caminh√µes, Semileves, Leves, M√©dios, Semipesados, e Pesados***. Aqui est√° uma an√°lise detalhada:
________________________________________
1. Comportamento Geral
‚Ä¢	Dados Hist√≥ricos (linha azul): Os dados mostram padr√µes variados entre as categorias:
o	Caminh√µes e Pesados: Tend√™ncia geral de crescimento ap√≥s per√≠odos de queda ou estabiliza√ß√£o.
o	Semileves e Leves: Decl√≠nio cont√≠nuo ou estabiliza√ß√£o em n√≠veis baixos.
o	M√©dios e Semipesados: Apresentam varia√ß√µes c√≠clicas e crescimento recente.
‚Ä¢	Previs√µes (linha azul clara): O modelo captura bem as tend√™ncias recentes para todas as categorias, ajustando-se aos √∫ltimos padr√µes hist√≥ricos antes da previs√£o.
________________________________________
2. Intervalos de Confian√ßa
‚Ä¢	√Åreas sombreadas (90% e 95%): 
o	S√£o mais amplas para horizontes de previs√£o mais longos, o que reflete maior incerteza futura.
o	Caminh√µes e Pesados: Incertezas s√£o moderadas, indicando previs√µes confi√°veis.
o	Semileves e Leves: Intervalos amplos, sugerindo maior incerteza devido √† volatilidade ou volume de dados reduzido.
o	Semipesados e M√©dios: Variabilidade capturada, mas com confian√ßa aceit√°vel.
________________________________________
3. Tend√™ncias e Padr√µes
‚Ä¢	Caminh√µes: Retomada de crescimento consistente, capturada adequadamente pelo modelo.
‚Ä¢	Semileves e Leves: O modelo prev√™ estabilidade com pouca varia√ß√£o.
‚Ä¢	M√©dios e Semipesados: Crescimento cont√≠nuo previsto, com sazonalidade moderada captada.
‚Ä¢	Pesados: Forte tend√™ncia de crescimento, bem modelada com intervalos de confian√ßa ajustados.
________________________________________
4. Poss√≠veis Problemas ou Melhorias
‚Ä¢	Semileves e Leves: A incerteza alta sugere que o modelo pode estar encontrando dificuldade em capturar padr√µes claros devido √† baixa variabilidade ou dados insuficientes.
‚Ä¢	Semipesados: Embora as previs√µes estejam alinhadas √† tend√™ncia, os intervalos s√£o mais amplos, sugerindo poss√≠vel ru√≠do nos dados.
________________________________________
5. A√ß√µes Recomendadas
‚Ä¢	Valida√ß√£o: Avaliar a precis√£o das previs√µes utilizando dados futuros ou um conjunto de teste.
‚Ä¢	An√°lise de Sazonalidade: Explorar vari√°veis sazonais ou ex√≥genas (como economia, regulamenta√ß√µes) para refinar o modelo.
‚Ä¢	Segmenta√ß√£o: Caso categorias menores apresentem alta incerteza, pode ser √∫til agreg√°-las a s√©ries maiores (ex.: juntar "Leves" e "Semileves").
________________________________________
No geral, o ***TimeGPT*** demonstrou bom desempenho na captura das tend√™ncias das s√©ries temporais. Ajustes finos podem melhorar as previs√µes em categorias com maior incerteza. 
''')


# Configura√ß√£o do cliente da Nixtla
    nixtla_client = NixtlaClient(
        api_key='nixak-vgekzclAmNcdPsAOSfaQ7WcDXWgGjU6X5peo92QoKCUKG4wDFq3AO1yU6GXStQRyGPHVw21Zao78DknY'
    )

col1, col2, col3=st.columns([2,2,2], gap='large')

with col1:

# Carregar os dados
    df = pd.read_excel(r"C:\Tablets\Caminh√µes_analises.xlsx")  
    st.write('***Dataframe Original: Base de dados Anfavea***', height=300, column_config=dict)
    st.dataframe(df)

    # Renomear a coluna de datas para 'ds' e garantir o formato correto
    df = df.rename(columns={"M√™s": "ds"})
    df['ds'] = pd.to_datetime(df['ds'])



    # Reestruturar os dados para o formato esperado pelo StatsForecast
    series_cols = ['Caminh√µes', 'Semileves', 'Leves', 'M√©dios', 'Semipesados', 'Pesados']
    df_long = df.melt(id_vars='ds', value_vars=series_cols, var_name='unique_id', value_name='y')

    st.write('***Dataframe ajustado para o padr√£o TimeGPT***')
    st.dataframe(df_long, height=300)

# Exibi√ß√£o inicial do DataFrame
    print("Visualiza√ß√£o inicial dos dados:")
    print(df_long.head())

    df_sub = df_long.query('unique_id == "DE"')


    df_train = df_long.query('ds < "2022-05-01"')
    df_test = df_long.query('ds >= "2022-05-01"')    
       
      

    plot_series(df_train[['unique_id','ds','y']][-200:], forecasts_df= df_test[['unique_id','ds','y']].rename(columns={'y': 'test'}))
    fcst_timegpt = nixtla_client.forecast(df = df_train[['unique_id','ds','y']],
                                        h=2*24,
                                        target_col = 'y',
                                        level = [90, 95])

with col2:
    st.write('***Previs√£o de Demanda  1. Modelo Base***')
    st.dataframe(fcst_timegpt, height=300)

    metrics = [mae, rmse, smape, bias]

    evaluation = evaluate(
        fcst_timegpt.merge(df_test, on=['unique_id', 'ds']),
        metrics=metrics,
        models=['TimeGPT']
    )

    
    evaluation.to_excel('C:\Tablets/evaluation.xlsx', index=False)

    print(evaluation)

    st.write('***M√©tricas de Performance 1. Modelo Base***')
    st.dataframe(evaluation)

# Plotar s√©ries com previs√µes
    plot_series(
        df_long,  # S√©rie hist√≥rica
        forecasts_df=fcst_timegpt,  # Previs√µes
        level=[90, 95]  # Intervalos de confian√ßa
    )
    
with col3:

    fcst_finetune_df = nixtla_client.forecast(df=df_train[['unique_id', 'ds', 'y']],
                                            h=24*2,
                                            finetune_steps = 50,
                                            level=[90, 95])

    st.write('***Previs√£o de Demanda  2.Fine-tuning Padr√£o: finetune_steps=50***')
    st.dataframe(fcst_finetune_df, height=300)

    evaluation_1 = evaluate(
        fcst_finetune_df.merge(df_test, on=['unique_id', 'ds']),
        metrics=metrics,
        models=['TimeGPT']
    )
    print(evaluation_1)
    
    st.write('***M√©tricas de Performance 2.Fine-tuning Padr√£o***')
    st.dataframe(evaluation_1, height=300)

    # Plotar s√©ries com previs√µes
    plot_series(
        df_long,  # S√©rie hist√≥rica
        forecasts_df=fcst_finetune_df,  # Previs√µes
        level=[90, 95]  # Intervalos de confian√ßa
    )

col1, col2=st.columns([1,1], gap='large')

with col1:

    st.write('***Previs√£o de Demanda  3. Fine-tuning (finetune_steps=50) + finetune_loss = mae***')
    
    fcst_finetune_mae_df = nixtla_client.forecast(df=df_train[['unique_id', 'ds', 'y']],
                                            h=24*2,
                                            finetune_steps = 50,
                                            finetune_loss = 'mae',
                                            level=[90, 95])

    st.dataframe(fcst_finetune_mae_df, height=300)

    evaluation_2 = evaluate(
        fcst_finetune_mae_df.merge(df_test, on=['unique_id', 'ds']),
        metrics=metrics,
        models=['TimeGPT']
    )
    print(evaluation_2)
    
    st.write('***M√©tricas de Performance 3. Fine-tuning com MAE***')
    st.dataframe(evaluation_2, height=300)

    # Plotar s√©ries com previs√µes
    plot_series(
        df_long,  # S√©rie hist√≥rica
        forecasts_df=fcst_finetune_mae_df,  # Previs√µes
        level=[90, 95]  # Intervalos de confian√ßa
    )

with col2:

    st.write('***Previs√£o de Demanda  4. Fine-tuning Avan√ßado: finetune_steps = finetune_steps= 50, finetune_depth=1, finetune_loss= mae***')
    
    fcst_finetune_depth_df = nixtla_client.forecast(df=df_train[['unique_id', 'ds', 'y']],
                                                    h=24*2,
                                                    finetune_steps = 50,
                                                    finetune_depth=1,
                                                    finetune_loss = 'mae',
                                                    level=[90, 95])

    st.dataframe(fcst_finetune_depth_df, height=300)

    evaluation_3 = evaluate(
        fcst_finetune_depth_df.merge(df_test, on=['unique_id', 'ds']),
        metrics=metrics,
        models=['TimeGPT']
    )
    print(evaluation_3)
    
    st.write('***M√©tricas de Performance 4. Fine-tuning Avan√ßado***')
    st.dataframe(evaluation_3, height=300)

    # Plotar s√©ries com previs√µes
    plot_series(
        df_long,  # S√©rie hist√≥rica
        forecasts_df=fcst_finetune_depth_df,  # Previs√µes
        level=[90, 95]  # Intervalos de confian√ßa
    )

col1, col2=st.columns([4,1], gap='large')

with col1:

    df_evaluation = pd.read_excel(r"C:\Tablets\df_evaluation.xlsx")  
    st.header('Compilado das Quatro An√°lises de ajustes no Modelo')
    st.markdown('''### ***Dataframe das Quatro An√°lises de Ajustes no Modelo*** 

    Este compilado apresenta uma vis√£o consolidada dos ajustes feitos no modelo, destacando seus impactos sobre as categorias analisadas e as principais m√©tricas: MAE, RMSE, SMAPE e Bias.
''')
    st.write('''***Dataframe Medidas de Performance***''')
    st.dataframe(df_evaluation, hide_index=300)

with col2: 

    st.markdown('''### ***An√°lises das Quatro An√°lises de Ajustes no Modelo*** 

---

    A tabela apresenta m√©tricas para previs√µes em diferentes categorias de ve√≠culos ("Caminh√µes", "Leves", etc.), utilizando diferentes m√©todos de ajuste fino ("fine-tuning"). Abaixo est√° uma an√°lise dos resultados principais:

---

### **1. An√°lise Geral**
- **M√©tricas Avaliadas**: MAE (Erro M√©dio Absoluto), RMSE (Erro Quadr√°tico M√©dio), SMAPE (Erro Percentual M√©dio Absoluto Sim√©trico) e Bias.
- **Objetivo**: Comparar o desempenho entre:
  1. **Modelo TimeGPT Original (`fcst_timegpt`)**
  2. **Fine-tuning padr√£o (50 steps)**
  3. **Fine-tuning com `finetune_loss = mae`**
  4. **Fine-tuning Avan√ßado (`finetune_depth=1` e `finetune_loss=mae`)**
- **Varia√ß√£o**: A diferen√ßa entre os valores obtidos e os valores do modelo original.

---

### **2. Observa√ß√µes por M√©trica**
#### **MAE (Erro M√©dio Absoluto)**
- Em quase todas as categorias (exceto "Pesados"), h√° uma redu√ß√£o significativa no erro ap√≥s o fine-tuning.
- **Destaques Positivos**:
  - **"Caminh√µes"**: Redu√ß√£o de 88,91.
  - **"Leves"**: Redu√ß√£o de 29,91.
  - **"M√©dios"**: Redu√ß√£o expressiva de 82,79.
- **Exce√ß√£o**: Em "Pesados", o MAE aumentou levemente (+25,96), indicando poss√≠vel sobreajuste ou inefic√°cia no ajuste fino.

#### **RMSE (Erro Quadr√°tico M√©dio)**
- Resultados similares ao MAE, com redu√ß√µes marcantes na maioria das categorias:
  - **"Caminh√µes"**: Redu√ß√£o de 268,06.
  - **"Leves"**: Redu√ß√£o de 36,46.
  - **"M√©dios"**: Redu√ß√£o de 81,77.
- **"Pesados"**: Pequeno aumento de 5,76.

#### **SMAPE (Erro Percentual M√©dio Absoluto Sim√©trico)**
- Em geral, todos os m√©todos de ajuste fino reduziram os valores de SMAPE, exceto "Pesados" (aumento pequeno de +0,00268).
- **Melhores Redu√ß√µes**:
  - **"Leves"**: Redu√ß√£o de 0,0168.
  - **"M√©dios"**: Redu√ß√£o de 0,0347.
  - **"Semipesados"**: Redu√ß√£o de 0,0056.

#### **Bias**
- O bias mostra uma redu√ß√£o expressiva para todas as categorias, indicando previs√µes mais equilibradas ap√≥s o fine-tuning:
  - **"Caminh√µes"**: Redu√ß√£o massiva de 740,43.
  - **"Leves"**: Redu√ß√£o de 61,89.
  - **"Pesados"**: O maior ajuste, com redu√ß√£o de 428,57.
  - **"Semileves"**: Redu√ß√£o moderada de 12,08.

---

### **3. Compara√ß√£o de M√©todos**
#### **Fine-tuning Padr√£o vs. Fine-tuning Avan√ßado**
- O m√©todo avan√ßado (com `finetune_depth=1`) apresentou resultados iguais ao ajuste com `finetune_loss=mae`, sugerindo que a profundidade extra n√£o trouxe ganhos adicionais significativos.
- Ambos os m√©todos s√£o consistentemente melhores que o TimeGPT original, exceto na categoria "Pesados".

#### **Varia√ß√£o Geral**
- A maior redu√ß√£o em erro foi observada na categoria **"Caminh√µes"** (RMSE e Bias).
- **Categorias Cr√≠ticas**:
  - **"Pesados"** apresentou aumentos no MAE e RMSE, o que requer an√°lise adicional.

---

### **4. Conclus√µes**
- **Melhorias Consistentes**: O fine-tuning reduziu os erros (MAE, RMSE, SMAPE) na maioria das categorias, com destaque para "Caminh√µes" e "Leves".
- **Pontos de Aten√ß√£o**:
  - A categoria "Pesados" apresentou aumentos leves em algumas m√©tricas, indicando necessidade de ajustes nos par√¢metros de treinamento.
- **Recomenda√ß√µes**:
  - Ajustar par√¢metros ou dados de entrada para a categoria "Pesados".
  - Focar no fine-tuning avan√ßado para obter maior estabilidade nas previs√µes.
    ''')



